% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GlaRe.R
\name{GLaRe}
\alias{GLaRe}
\title{Assess Losslessness of a Latent Feature Representation Method using k-Fold Cross-Validation}
\usage{
GLaRe(
  mat = as.matrix(glaucoma_data),
  latent_dim_from = 1,
  latent_dim_to = min(ncol(mat), nrow(mat) - 1),
  latent_dim_by = 1,
  learn = "pca",
  method_name = toupper(learn),
  kf = 5,
  cvqlines = 0.9,
  ae_args = list(),
  tolerance_level = 0.05,
  cutoff_criterion = 0.95,
  learn_function = NULL,
  verbose = TRUE
)
}
\arguments{
\item{mat}{An n-by-p data matrix where `n` represents the number of observations, and `p` represents
the number of features.}

\item{latent_dim_from}{An integer specifying the starting point of the latent feature dimension
range. Defaults to 1.}

\item{latent_dim_to}{An integer specifying the ending point of the latent feature dimension
range. Defaults to `min(ncol(mat) - 1, nrow(mat) - 1)`.}

\item{latent_dim_by}{An integer defining the step size for increments in the latent feature dimension
range. Defaults to 1.}

\item{learn}{A string specifying the latent feature representation method. Options are:
\itemize{
  \item `"pca"`: Principal Component Analysis.
  \item `"dwt"`: Discrete Wavelet Transform.
  \item `"dwt.2d"`: Two-dimensional Discrete Wavelet Transform.
  \item `"ae"`: Autoencoder.
  \item `"user"`: User-defined custom method (requires `learn_function` parameter).
}
Defaults to `"pca"`.}

\item{method_name}{A string for the name of the method to feature on plot titles. Defaults to
`toupper(learn)`.}

\item{kf}{An integer specifying the number of folds for k-fold cross-validation. Defaults to 5.}

\item{cvqlines}{A numeric value between 0 and 1 specifying the quantile of the cross-validated
loss distribution to display on the scree plot. Defaults to 0.9.}

\item{ae_args}{A list of parameters for autoencoder training, used only if `learn = "ae"`. Must include:
\itemize{
  \item `layer_1_dim`: Number of nodes in the hidden layer.
  \item `link_fun`: Activation function for the autoencoder.
  \item `epochs`: Number of training epochs.
  \item `loss`: Loss function to optimize.
  \item `batch_size`: Mini-batch size for training.
}}

\item{tolerance_level}{A numeric value specifying the maximum allowable loss for a specified quantile
of observations. Defaults to 0.05.}

\item{cutoff_criterion}{A numeric value (between 0 and 1) defining the quantile of observations for
which the tolerance level must be met. Defaults to 0.95.}

\item{learn_function}{A custom function for encoding and decoding, required if `learn = "user"`.
The function must take arguments `Y` (data matrix) and `k` (latent dimension) and return a
list containing `Encode` and `Decode` functions.}

\item{verbose}{Logical; if `TRUE`, progress messages are printed during training and evaluation.
Defaults to `TRUE`.}
}
\value{
A list containing:
\itemize{
  \item `qd`: The qualifying dimension where the loss meets the specified tolerance level.
  \item `Encode`: Encoding function for the latent representation (if `qd` is found).
  \item `Decode`: Decoding function for reconstructing data from the latent representation.
  \item `heatmap`: A Plotly heatmap of information loss across latent dimensions and quantiles.
}
}
\description{
The `GLaRe` function evaluates the quality of latent feature representation methods by estimating
the distribution of information loss through k-fold cross-validation. It identifies the qualifying
dimension (qd) where a user-defined quantile of the loss distribution meets a tolerance level,
providing a compact and interpretable representation. Visualizations such as scree plots and
heatmaps are generated for interpretability.
}
\examples{
data(glaucoma_data)
result <- GLaRe(
  mat = glaucoma_data,
  latent_dim_from = 1,
  latent_dim_to = 50,
  learn = "pca",
  kf = 5,
  tolerance_level = 0.05,
  cutoff_criterion = 0.95,
  verbose = TRUE
)

}
\seealso{
\code{\link{summary_correlation_plot}}, \code{\link{plot_train_validation_ratio}}
}
